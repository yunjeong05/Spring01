<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- Root Context(프로젝트 별로 파일이름이 다를 수도 있음): 부모 스프링 컨테이너를 만드는 설정 파일 -->
	<!-- component-scan: 대상 패키지에 있는 클래스들 중 어노테이션(@Component)가 선언된 클래스들을 찾아서 자동으로 객체를 만들어줌 
										  특정패키지 이름 지정 정확하게 작성해야한다. service 지움 -->
	<context:component-scan base-package="com.ezen.spring"></context:component-scan>
	
	<!-- AOP 관련 어노테이션들을 읽어들여 aop를 구현 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

		<!-- 외부파일 참조 -->
	<!-- classpath: ==> java build path의 source탭에 설정되어 있는 classpath위치  -->
	<context:property-placeholder location="classpath:config/db.properties"/>

	<!-- JDBC Template에서 사용할 DataSource 설정 -->
	<!-- dataSource같은 bean객체는 정해진 id로 생성해야한다. -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/studydb?serverTimezone=UTC"></property>
		<property name="username" value="study"></property>
		<property name="password" value="!ezen1234"></property>
	</bean>
	
	<!-- JDBC Template bean 객체로 등록 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
								<!-- value 대신 ref로 작성 // 탬플릿이 만들어진 상댄-->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 (DDL이 끝난 후 자동으로 commit, rollback 호출) -->
	<!-- TransactionManager 클래스를 bean 객체로 만들어서 Transaction을 관리 -->
	<bean id="txManager" 
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- setter 변수 넣기 위해 변수 만들기 -->
		<property name="dataSource" ref="dataSource"></property>	  
	</bean>
		
	<!-- TranscationManager로만은 Transaction이 관리되지 않음 -->
	<!-- AOP로 어드바이스나 어드바이저 등을 설정해줘야 Transaction이 동작함  
		 txManager는 commit과 rollback을 가져옴 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!--어떤 메소드에서 transaction이 동작할 지 설정 -->
		<tx:attributes>
			<!-- get으로 시작하는 메소드는 셀렉트 가만히 보고만 있고 // 필터링 -->
			<tx:method name="get*" read-only="true"/>
			<!-- get으로 시작하는 메소드를 제외한 모든 메소드 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- aop로 포인트컷과 어드바이저 설정 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.ezen.spring.service..*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
		
	<!-- bean 객체 생성 -->
	<!-- 컨테이너가 구동되면서 자동으로 생성 -->
	<!-- 어떤 ID로 어떤 객체를 생성할 건지 -->
	<!-- id로 DL해서 DI까지해서 이용하게 된다. -->
	<!-- init-method: 멤버변수 초기화가 필요한 객체들은 초기화 메소드를 만들어서 등록 -->
	<!-- destroy-method: 객체 삭제되기 전에 해야될 동작들을 메소드로 지정 -->
	<!-- lazy-init: 객체의 생성 시점 설정. false가 기본값, true 설정 시 객체를 요청할 때 생성 -->
	<!-- scope: 객체 생성 방식(하나의 객체만 생성할 지 여러개 객체를 생성할지)지정, 기본값: singleton 
	            객체를 계속해서 생성하게 되면 메모리 부하가 걸리기 때문에 singleton으로 지정하는 것이 바람직하다.-->
	<!-- 생성자 변경 시 <constructor-arg ref="매개변수로 가져갈 객체id, 숫자, 스트링 등"></constructor-arg> -->
	<!--<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV">
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="100000"></constructor-arg>
	</bean>-->
	
	<!-- 세터함수를 이용한 DI -->
	<!--<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="100000"></property>
	</bean>-->
	<!-- p namespace를 이용한 세터함수 호출(DI)
	<bean id="sTv" class="com.ezen.spring.polymorphism.SamsungTV"
		  p:speaker-ref="apple" p:price="100000"
	>
	</bean>	 -->
	
	<!-- constructor-arg ref에 객체가 들어갈 경우 미리 생성된 객체를 사용해야됨. 그래서 SonySpeaker도 bean 객체로 등록-->
	<!--<bean id="sony" class="com.ezen.spring.polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="com.ezen.spring.polymorphism.AppleSpeaker"></bean>-->
	<!-- ctrl+space: 클래스명 자동 완성
	<bean id="lTv" class="com.ezen.spring.polymorphism.LgTV"/>-->
	
	<!-- AOP 설정 -->
	<!-- 공통관심인 클래스는 bean 객체로 미리 생성한다. -->
	<!-- bean id="log" class="com.ezen.spring.common.BoforeAdvice" -->
<!--	<bean id="log" class="com.ezen.spring.common.AroundAdvice"></bean>
	<bean id="after" class="com.ezen.spring.common.AfterAdvice"></bean>-->
	
	<!-- AOP 동작 설정 -->
	<!-- <aop:config>: aop 설정의 루트 엘리먼트. 항상 aop:conpig로 aop 설정을 시작
		<aop:config> -->
		<!-- aop:pointcut : 공통 기능함수가 실행될 메소드 지정
		<aop:pointcut id="allpointcut" 
		 expression="execution(* com.ezen.spring.service..*Impl.*(..))"></aop:pointcut>
		 <aop:pointcut id="getpointcut" 
		 expression="execution(* com.ezen.spring.service..*get.*(..))"></aop:pointcut>
		 -->
		<!-- aop:aspect: 포인트컷과 어드바이스가 결합되는 설정
		<aop:aspect ref="log">  -->
			<!-- 어드바이스  공통으로 추가될 기능코드(printLogging)-->
			<!-- <aop:before method="beforeMethod" pointcut-ref="allpointcut"/> -->
			<!--  aop:after-returning일 때 returning 속성을 사용하여 리턴값을 바인드변수와 매핑 
			<aop:after-returning method="afterReturningMethod" pointcut-ref="allpointcut" returning="returnObj" />-->
			
			<!-- aop:after-throwing일 때 바인드 변수 매핑은 throwing속성을 사용한다.
			<aop:around method="aroundMethod" pointcut-ref="allpointcut" />
		</aop:aspect> -->
		<!-- <aop:aspect ref="after"> 
			어드바이스  공통으로 추가될 기능코드(printLogging)// boardServiceImpl비지니스로직 에러가 있어도 끝날때 기능을 추가하겠다는 의미
			<aop:after method="afterMethod" pointcut-ref="allpointcut"/>
		</aop:aspect>
	</aop:config>	-->
	


</beans>
